# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  # config.vm.box = "generic/ubuntu2204"
  # config.vm.box = "hashicorp/bionic64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "./data", "/vagrant_data"

  # Disable the default share of the current code directory. Doing this
  # provides improved isolation between the vagrant box and your host
  # by making sure your Vagrantfile isn't accessible to the vagrant box.
  # If you use this you may want to enable additional shared subfolders as
  # shown above.
  # config.vm.synced_folder ".", "/vagrant", disabled: true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
    vb.memory = "2048"
    vb.cpus = "2"
    vb.customize ["modifyvm", :id, "--groups", ("/k8s")]
  end
  ##
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
  # config.vm.provision "shell", path: "bootstrap.sh"
  # 
  # example
  # config#.vm.provision "shell" do |s|
  #   s.binary = true # Replace Windows line endings with Unix line endings.
  #   s.inline = %Q(/usr/bin/env    \
  #      TRACE=#{ENV['TRACE']}       \
  #     VERBOSE=#{ENV['VERBOSE']}   \
  #     FORCE=#{ENV['FORCE']}       \
  #     bash my_script.sh)
  # end
  config.vm.define "master" do |master|
    # master.vm.box = "hashicorp/bionic64"
    # master.vm.box = "k8s_cli_docker"
    master.vm.box = "master-with-kubeadm"
    master.vm.network "private_network", ip: "10.0.0.10"
    master.vm.provision "shell", path: "bootstrap-master-with-kubeadmin.sh", :args => "'master' '10.0.0.10' 'worker' '10.0.0.11'", run: "always"
    master.vm.network "forwarded_port", guest: 80, host: 8080
    master.vm.network "forwarded_port", guest: 8001, host: 8001
    master.vm.network "forwarded_port", guest: 6643, host: 6643
  end

  config.vm.define "worker" do |worker|
    worker.vm.box = "k8s_cli_docker"
    worker.vm.network "private_network", ip: "10.0.0.11"
    worker.vm.provision "shell", path: "bootstrap-worker.sh", :args => "'master' '10.0.0.10' 'worker' '10.0.0.11'", run: "always"
  end
#
  #config.vm.define "worker" do |worker|
  #  worker.vm.box = "master_node"
  #  worker.vm.network "public_network", ip: "192.168.56.2", bridge: "wlp0s20f3"
  #  worker.vm.provision "shell", path: "common.sh", :args => "'worker' 'master' '192.168.56.1'", run: "always"
  #end
end
#
#  you are right. In VMware workstation, i changed the subnet address for host-only and NAT from 192.168.177.0 / 192.168.152.0 to 172.16.177.0 / 172.16.152.0

# kill process
# ps aux | grep -i vagrant
#
# git reset --hard origin/master
# FIX Stderr: VBoxManage: error: VirtualBox can't operate in VMX root mode. Please disable the KVM kernel extension
#
# stop kvm the process
# lsof | grep /dev/kvm
# sudo kill -9 pid
#
# or remove the module forever (rancher is using this module, so it's not going to work after this)
# sudo modprobe -r kvm_intel 
# sudo modprobe -r kvm
#
# create a box
# vagrant package master --output master_node
# 
# add the box to the engine
# vagrant box add --name master_node file://./master_node.box
#
# now you can use it as master.vm.box = "master_node"
#
#
# create a snapshot 
# vagrant snapshot save master_node_update
#
# vagrant snapshot list
# https://devopscube.com/kubernetes-cluster-vagrant/